using Microsoft.Win32;
using RequestMaster.Databases.MainDatabase;
using RequestMaster.Other;
using RequestMaster.Patterns;
using Spire.Doc;
using Spire.Doc.Documents;
using Spire.Doc.Formatting;
using System.Globalization;
using System.IO;
using System.Windows;
using System.Windows.Controls;

namespace RequestMaster.Tabs.RequestsTabMVVM.Models
{
    public partial class RequestsGrid : UserControl
    {
        RequestsContext db;
        RequestsMenuLogger logger;
        Snackbar snackBar;
        string? statusFilter = "активна";
        int? authorFilter;
        public List<Request> requestsList;
        List<Request> searchedRequests = new List<Request>();
        List<Request> requestsToSort = new List<Request>();
        DateTime startDate;
        DateTime endDate;
        public RequestsGrid()
        {
            InitializeComponent();
            logger = new RequestsMenuLogger();
            snackBar = new Snackbar(snackBarXAML);
            db = DatabaseSingleton.CreateInstance();
            helpButton.Focus();
            endDateBox.Text = $"{DateTime.Now:d}";
            startDate = DateTime.ParseExact(startDateBox.Text.ToString(), "dd.MM.yyyy", CultureInfo.InvariantCulture);
            endDate = DateTime.ParseExact(endDateBox.Text.ToString(), "dd.MM.yyyy", CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1);
            requestsList = db.Requests.
                Where(x => x.CreationDate >= startDate && x.CreationDate <= endDate).ToList();
            requestsDataGrid.ItemsSource = requestsList;
            requestsDataGrid.AutoGeneratedColumns += requestsDataGrid_AutoGeneratedColumns;
        }

        private void requestsDataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            requestsDataGrid.Columns[0].Header = "ID";
            requestsDataGrid.Columns[1].Header = "описание";
            requestsDataGrid.Columns[2].Header = "номер";
            requestsDataGrid.Columns[3].Header = "статус";
            requestsDataGrid.Columns[4].Visibility = Visibility.Hidden;
            requestsDataGrid.Columns[5].Visibility = Visibility.Hidden;
            requestsDataGrid.Columns[6].Visibility = Visibility.Hidden;
            requestsDataGrid.Columns[7].Visibility = Visibility.Hidden;
            requestsDataGrid.Columns[8].Header = "дата создания";
        }
        private void refreshRequestsDataGridWithoutFilters()
        {
            requestsDataGrid.ItemsSource = requestsList;
            radioButtonStatus_NotImportant.IsChecked = true;
            radioButtonAuthor_NotImportant.IsChecked = true;

            logger.log($"таблица обновлена без фильтров");
        }
        private FileFormat GetFileFormat(string filePath)
        {
            string extension = Path.GetExtension(filePath).ToLower();

            switch (extension)
            {
                case ".docx":
                    return FileFormat.Docx;
                case ".doc":
                    return FileFormat.Doc;
                case ".rtf":
                    return FileFormat.Rtf;
                default:
                    throw new ArgumentException("неподдерживаемый формат файла");
            }
        }

        #region click
        private void helpButton_Click(object sender, RoutedEventArgs e)
        {
            snackBar.show("нажмите на любую заявку дважды");
            logger.log($"нажата кнопка помощь");
        }
        private void ClearFiltersButton_Click(object sender, RoutedEventArgs e)
        {
            statusFilter = string.Empty;
            authorFilter = null;
            refreshRequestsDataGridWithoutFilters();

            logger.log($"фильтры очищены");
        }
        private void createRequestButton_Click(object sender, RoutedEventArgs e)
        {
            Requests.createRequestMenu.Visibility = Visibility.Visible;

            logger.log($"нажата кнопка создать заявку");
        }
        private void requestsDataGrid_MouseDoubleClick(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            try
            {
                Requests.requestCard = requestsList.Where(x => x.RequestID == requestsDataGrid.SelectedIndex + 1).First();
                Requests.requestDetailsMenu.Visibility = Visibility.Visible;

                logger.log($"открыто меню детали заявки №{requestsDataGrid.SelectedIndex + 1}");
            }

            catch (Exception ex) 
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void search_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(searchBox.Text))
                {
                    searchedRequests.Clear();
                    refreshRequestsDataGridWithoutFilters();
                    List<string> searchWords = (searchBox.Text.
                        Split(new[] { ' ', ',', ';' }, StringSplitOptions.RemoveEmptyEntries)
                        .Select(word => word.ToLowerInvariant()).ToList());

                    for (int i = 0; i <= requestsList.Count() - 1; ++i)
                    {
                        foreach (string word in searchWords)
                        {
                            if (requestsList[i].Description.ToLowerInvariant().Contains(word))
                            {
                                searchedRequests.Add(requestsList[i]);
                            }
                        }
                    }
                    requestsDataGrid.ItemsSource = searchedRequests;
                }
                else
                {
                    requestsDataGrid.ItemsSource = requestsList;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void SortButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                startDate = DateTime.ParseExact(startDateBox.Text.ToString(), "dd.MM.yyyy", CultureInfo.InvariantCulture);
                endDate = DateTime.ParseExact(endDateBox.Text.ToString(), "dd.MM.yyyy", CultureInfo.InvariantCulture).AddDays(1).AddSeconds(-1);

                if (requestsDataGrid.ItemsSource == searchedRequests)
                {
                    requestsToSort = searchedRequests;
                }
                else
                {
                    requestsToSort = requestsList;
                }

                if (statusFilter != string.Empty && authorFilter != null)
                {
                    requestsDataGrid.ItemsSource = requestsToSort.
                        Where(x => x.Status == statusFilter && x.WhoCreatedID == authorFilter
                        && x.CreationDate >= startDate && x.CreationDate <= endDate);
                }
                if (statusFilter == string.Empty && authorFilter != null)
                {
                    requestsDataGrid.ItemsSource = requestsToSort.
                        Where(x => x.WhoCreatedID == authorFilter
                        && x.CreationDate >= startDate && x.CreationDate <= endDate);
                }
                if (statusFilter != string.Empty && authorFilter == null)
                {
                    requestsDataGrid.ItemsSource = requestsToSort.
                        Where(x => x.Status == statusFilter
                        && x.CreationDate >= startDate && x.CreationDate <= endDate);
                }
                if (statusFilter == string.Empty && authorFilter == null)
                {
                    requestsDataGrid.ItemsSource = requestsToSort.
                        Where(x => x.CreationDate >= startDate && x.CreationDate <= endDate);
                }
            }
            catch (FormatException) 
            {
                snackBar.show("проверьте правильность ввода даты");
            }
            logger.log($"заявки отсортированы");
        }

        private void createReport_Click(object sender, RoutedEventArgs e)
        {

            Spire.Doc.Document doc = new();

            Section section = doc.AddSection();
            section.PageSetup.Margins.All = 60f;
            Paragraph title = section.AddParagraph();
            title.AppendText("Отчет");
            title.ApplyStyle(BuiltinStyle.Title);
            title.AppendBreak(BreakType.LineBreak);
            section.AddParagraph();

            Paragraph requestsCountTitle = section.AddParagraph();
            requestsCountTitle.AppendText("Таблица 1. Количество заявок по статусу").CharacterFormat.Bold = true;
            requestsCountTitle.AppendText("\n");

            Table requestsCountTable = section.AddTable();
            requestsCountTable.ResetCells(2, 3);
            requestsCountTable[0, 0].AddParagraph().AppendText("активно");
            requestsCountTable[0, 1].AddParagraph().AppendText("в обработке");
            requestsCountTable[0, 2].AddParagraph().AppendText("закрыто");
            requestsCountTable[1, 0].AddParagraph().
                AppendText($"{requestsDataGrid.Items.OfType<Request>().Where(x => x.Status == "активна").Count()}");
            requestsCountTable[1, 1].AddParagraph().
                AppendText($"{requestsDataGrid.Items.OfType<Request>().Where(x => x.Status == "в обработке").Count()}");
            requestsCountTable[1, 2].AddParagraph().
                AppendText($"{requestsDataGrid.Items.OfType<Request>().Where(x => x.Status == "закрыта").Count()}");


            Paragraph requestsTitle = section.AddParagraph();
            requestsTitle.AppendText("\n");
            requestsTitle.AppendText("Таблица 2. Заявки").CharacterFormat.Bold = true;
            requestsTitle.AppendText("\n");
            Table requestsTable = section.AddTable();
            requestsTable.ResetCells(requestsDataGrid.Items.Count + 1, 5);

            requestsTable[0, 0].AddParagraph().AppendText("ID");
            requestsTable[0, 1].AddParagraph().AppendText("описание");
            requestsTable[0, 2].AddParagraph().AppendText("номер");
            requestsTable[0, 3].AddParagraph().AppendText("статус");
            requestsTable[0, 4].AddParagraph().AppendText("дата создания");
            int i = 1;
            foreach (Request r in requestsDataGrid.Items)
            {
                requestsTable[i, 0].AddParagraph().AppendText($"{r.RequestID}");
                requestsTable[i, 1].AddParagraph().AppendText(r.Description);
                requestsTable[i, 2].AddParagraph().AppendText(r.TelephoneNumber);
                requestsTable[i, 3].AddParagraph().AppendText(r.Status);
                requestsTable[i, 4].AddParagraph().AppendText($"{r.CreationDate}");
                ++i;
            }

            SaveFileDialog sd = new SaveFileDialog();
            sd.Filter = "Word Document (*.docx)|*.docx|Word 97-2003 Document (*.doc)|*.doc|Rich Text Format (*.rtf)|*.rtf";
            sd.FileName = $"Отчет_{DateTime.Now.ToString("dd.MM.yyyy")}.docx";
            sd.Title = "Сохранить как";
            try
            {
                if (sd.ShowDialog() == true)
                {
                    string filePath = sd.FileName;
                    FileFormat fileFormat = GetFileFormat(sd.FileName);
                    doc.SaveToFile(filePath, fileFormat);
                }
            }
            catch (Exception ex) 
            {
                MessageBox.Show(ex.Message);
            }


            doc.Dispose();
        }

        private void import_Click(object sender, RoutedEventArgs e)
        {

        }

        private void export_Click(object sender, RoutedEventArgs e)
        {

        }
        #endregion

        #region radioButtons
        private void radioButtonStatus_Active_Checked(object sender, RoutedEventArgs e)
        {
            statusFilter = "активна";
        }

        private void radioButtonStatus_Processing_Checked(object sender, RoutedEventArgs e)
        {
            statusFilter = "в обработке";
        }

        private void radioButtonStatus_Closed_Checked(object sender, RoutedEventArgs e)
        {
            statusFilter = "закрыта";
        }
        private void radioButtonStatus_NotImportant_Checked(object sender, RoutedEventArgs e)
        {
            statusFilter = string.Empty;
        }

        private void radioButtonAuthor_Me_Checked(object sender, RoutedEventArgs e)
        {
            authorFilter = AuthWindow.user!.UserID;
        }
        private void radioButtonAuthor_NotMe_Checked(object sender, RoutedEventArgs e)
        {
            authorFilter = 0;
        }

        private void radioButtonAuthor_NotImportant_Checked(object sender, RoutedEventArgs e)
        {
            authorFilter = null;
        }
        #endregion
    }
}
