using OrdersApp.Databases.OrdersDatabase;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace OrdersApp.Tabs
{
    public partial class FindWork : UserControl
    {
        public FindWork()
        {
            InitializeComponent();
            applyButton.Focus();
            ordersDataGrid.ItemsSource = App.db.Orders.Where(x => x.Status != "Awaiting confirmation").ToList();
            ordersDataGrid.AutoGeneratedColumns += ordersDataGrid_AutoGeneratedColumns;
        }

        private void ordersDataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            ordersDataGrid.Columns[0].Header = "ID";
            ordersDataGrid.Columns[1].Header = "Payment";
            ordersDataGrid.Columns[2].Header = "Description";
            ordersDataGrid.Columns[3].Header = "Telephone number";
            ordersDataGrid.Columns[4].Header = "Count of people needed";
            ordersDataGrid.Columns[5].Header = "Status";
            ordersDataGrid.Columns[6].Visibility = Visibility.Hidden;
            ordersDataGrid.Columns[7].Visibility = Visibility.Hidden;
            ordersDataGrid.Columns[8].Visibility = Visibility.Hidden;
            ordersDataGrid.Columns[9].Visibility = Visibility.Hidden;
        }
        
        #region ButtonClick
        private void SortButton_Click(object sender, RoutedEventArgs e)
        {
            if (radioButtonStatus_NotImportant.IsChecked == false)
            {
                string status = "";
                if (radioButtonStatus_Active.IsChecked == true) status = "Active";
                else if (radioButtonStatus_Processing.IsChecked == true) status = "Processing";
                else if (radioButtonStatus_Closed.IsChecked == true) status = "Closed";

                ordersDataGrid.ItemsSource = App.db.Orders.Where(x =>
                    x.Payment >= int.Parse(textBoxPaymentMin.Text) &&
                    x.Payment <= int.Parse(textBoxPaymentMax.Text) &&
                    x.CountOfPeopleNeeded >= int.Parse(textBoxForCountOfPeopleNeededMin.Text) &&
                    x.CountOfPeopleNeeded <= int.Parse(textBoxForCountOfPeopleNeededMax.Text) &&
                    x.Status == status).ToList();
            }
            else
            {
                ordersDataGrid.ItemsSource = App.db.Orders.Where(x =>
                    x.Payment >= int.Parse(textBoxPaymentMin.Text) &&
                    x.Payment <= int.Parse(textBoxPaymentMax.Text) &&
                    x.CountOfPeopleNeeded >= int.Parse(textBoxForCountOfPeopleNeededMin.Text) &&
                    x.CountOfPeopleNeeded <= int.Parse(textBoxForCountOfPeopleNeededMax.Text)).ToList();
            }
            CollectionViewSource.GetDefaultView(ordersDataGrid.ItemsSource).Refresh();
            App.logWriter!.WriteLine($"Find work tab refreshed\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }

        private void applyButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Order order = App.db.Orders.Where(x => x.ID == ((Order)ordersDataGrid.SelectedItem).ID).FirstOrDefault()!;
                User user = App.db.Users.Where(x => x.Login == AuthWindow.login).FirstOrDefault()!;
                if (order != null)
                {
                    order.Status = "Processing";
                    order.EmployeeID = user.UserId;
                    user.OrderID = order.ID;
                }
                App.db.SaveChanges();
                CollectionViewSource.GetDefaultView(ordersDataGrid.ItemsSource).Refresh();
                snackBar.MessageQueue?.Enqueue
                    ($"You have applied and order {order!.ID}", null, null, null, false, true, TimeSpan.FromSeconds(3));
                App.logWriter!.WriteLine($"Order number {order!.ID} applied by '{user.Login}' with ID={user.UserId}\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
            }
            catch (Exception)
            {
                snackBar.MessageQueue?.Enqueue
                    ("Firstly choose an order", null, null, null, false, true, TimeSpan.FromSeconds(3));
            }
        }
        private void helpButton_Click(object sender, RoutedEventArgs e)
        {
            snackBar.MessageQueue?.Enqueue
                    ("Choose one of the orders and click \"Apply order\"", null, null, null, false, true, TimeSpan.FromSeconds(3));
        }
        private void ClearFiltersButton_Click(object sender, RoutedEventArgs e)
        {
            ordersDataGrid.ItemsSource = App.db.Orders.ToList();
            CollectionViewSource.GetDefaultView(ordersDataGrid.ItemsSource).Refresh();
            App.logWriter!.WriteLine($"Filters on find work tab cleared\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        #endregion

        #region radioButtonCountOfPeopleNeeded_Checked
        private void radioButtonCountOfPeopleNeeded_1_Checked(object sender, RoutedEventArgs e)
        {
            textBoxForCountOfPeopleNeededMin.Text = "1";
            textBoxForCountOfPeopleNeededMin.IsEnabled = false;
            textBoxForCountOfPeopleNeededMax.Text = "1";
            textBoxForCountOfPeopleNeededMax.IsEnabled = false;
            App.logWriter!.WriteLine($"Radio button 'count of people needed = 1' checked\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        private void radioButtonCountOfPeopleNeeded_2_Checked(object sender, RoutedEventArgs e)
        {
            textBoxForCountOfPeopleNeededMin.Text = "2";
            textBoxForCountOfPeopleNeededMin.IsEnabled = false;
            textBoxForCountOfPeopleNeededMax.Text = "2";
            textBoxForCountOfPeopleNeededMax.IsEnabled = false;
            App.logWriter!.WriteLine($"Radio button 'count of people needed = 2' checked\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        private void radioButtonCountOfPeopleNeeded_3_Checked(object sender, RoutedEventArgs e)
        {
            textBoxForCountOfPeopleNeededMin.Text = "3";
            textBoxForCountOfPeopleNeededMin.IsEnabled = false;
            textBoxForCountOfPeopleNeededMax.Text = "3";
            textBoxForCountOfPeopleNeededMax.IsEnabled = false;
            App.logWriter!.WriteLine($"Radio button 'count of people needed = 3' checked\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        private void radioButtonCountOfPeopleNeeded_4_Checked(object sender, RoutedEventArgs e)
        {
            textBoxForCountOfPeopleNeededMin.Text = "1";
            textBoxForCountOfPeopleNeededMin.IsEnabled = true;
            textBoxForCountOfPeopleNeededMax.Text = "10";
            textBoxForCountOfPeopleNeededMax.IsEnabled = true;
            App.logWriter!.WriteLine($"Radio button 'count of people needed = not important' checked\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        #endregion

        #region radioButtonPayment_Checked
        private void radioButtonPayment_1_Checked(object sender, RoutedEventArgs e)
        {
            textBoxPaymentMin.Text = "0";
            textBoxPaymentMin.IsEnabled = false;
            textBoxPaymentMax.Text = "1000";
            textBoxPaymentMax.IsEnabled = false;
            App.logWriter!.WriteLine($"Radio button 'payment = 0 - 1000' checked\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        private void radioButtonPayment_2_Checked(object sender, RoutedEventArgs e)
        {
            textBoxPaymentMin.Text = "1000";
            textBoxPaymentMin.IsEnabled = false;
            textBoxPaymentMax.Text = "3000";
            textBoxPaymentMax.IsEnabled = false;
            App.logWriter!.WriteLine($"Radio button 'payment = 1000 - 3000' checked\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        private void radioButtonPayment_3_Checked(object sender, RoutedEventArgs e)
        {
            textBoxPaymentMin.Text = "3000";
            textBoxPaymentMin.IsEnabled = false;
            textBoxPaymentMax.Text = "5000";
            textBoxPaymentMax.IsEnabled = false;
            App.logWriter!.WriteLine($"Radio button 'payment = 3000 - 5000' checked\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }

        private void radioButtonPayment_4_Checked(object sender, RoutedEventArgs e)
        {
            textBoxPaymentMin.Text = "0";
            textBoxPaymentMin.IsEnabled = true;
            textBoxPaymentMax.Text = "10000";
            textBoxPaymentMax.IsEnabled = true;
            App.logWriter!.WriteLine($"Radio button 'payment = not important' checked\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        #endregion


    }
}