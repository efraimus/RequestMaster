using OrdersApp.Databases.OrdersDatabase;
using OrdersApp.Exceptions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace OrdersApp.Tabs
{
    public partial class Profile : UserControl 
    {
        public Profile()
        {
            InitializeComponent();
            refreshTab();
            ordersEmployeeDataGrid.AutoGeneratedColumns += ordersEmployeeDataGrid_AutoGeneratedColumns;
            ordersEmployerDataGrid.AutoGeneratedColumns += ordersEmployerDataGrid_AutoGeneratedColumns;
        }

        #region AutoGeneratedColumns
        private void ordersEmployeeDataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            ordersGridHeaders(ordersEmployeeDataGrid);
        }

        private void ordersEmployerDataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            ordersGridHeaders(ordersEmployerDataGrid);
        }

        private void ordersGridHeaders(DataGrid dataGrid)
        {
            dataGrid.Columns[0].Header = "ID";
            dataGrid.Columns[1].Header = "Payment";
            dataGrid.Columns[2].Header = "Description";
            dataGrid.Columns[3].Header = "Telephone number";
            dataGrid.Columns[4].Header = "Count of people needed";
            dataGrid.Columns[5].Header = "Status";
            dataGrid.Columns[6].Visibility = Visibility.Hidden;
            dataGrid.Columns[7].Visibility = Visibility.Hidden;
            dataGrid.Columns[8].Visibility = Visibility.Hidden;
            dataGrid.Columns[9].Visibility = Visibility.Hidden;
        }

        #endregion

        #region ButtonClick
        private void refreshButton_Click(object sender, RoutedEventArgs e)
        {
            refreshTab();
            App.logWriter!.WriteLine($"Profile tab refreshed\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }

        private void refreshTab()
        {
            textBoxLogin.Text = $"Login: {AuthWindow.login}";
            textBoxPassword.Text = $"Password: {AuthWindow.password}";
            textBoxEmail.Text = $"Email: {AuthWindow.email}";
            textBoxBalance.Text = $"Balance: {AuthWindow.balance}";

            ordersEmployeeDataGrid.ItemsSource = App.db.Orders.
                Where(x => x.EmployeeID == AuthWindow.userID &&
                (x.Status == "Processing" ||
                x.Status == "Awaiting confirmation")).ToList();

            ordersEmployerDataGrid.ItemsSource = App.db.Orders.
                Where(x => x.EmployerID == AuthWindow.userID &&
                (x.Status == "Processing" ||
                x.Status == "Active" ||
                x.Status == "Awaiting confirmation")).ToList();
        }

        private void markAsCompletedButton_Click(object sender, RoutedEventArgs e)
        {
            string performer = "";
            try
            {
                if (ordersEmployerDataGrid.SelectedItem != null)
                {
                    performer = "employer";
                    markAsCompleted(performer, ordersEmployerDataGrid);
                }
                else if (ordersEmployeeDataGrid.SelectedItem != null)
                {
                    performer = "employee";
                    markAsCompleted(performer, ordersEmployeeDataGrid);
                }
                else
                {
                    snackBar1.MessageQueue?.Enqueue
                    ("Firstly choose an order", null, null, null, false, true, TimeSpan.FromSeconds(3));
                }
            }
            catch (OrderNotFoundException)
            {
                snackBar1.MessageQueue?.Enqueue
                    ("Order not found", null, null, null, false, true, TimeSpan.FromSeconds(3));
            }
        }

        #endregion

        #region Methods
        private void markAsCompleted(string performer, DataGrid dataGrid)
        {

            Order order = App.db.Orders.Where(x => x.ID == ((Order)dataGrid.SelectedItem).ID).FirstOrDefault()!;
            User user = App.db.Users.Where(x => x.Login == AuthWindow.login).FirstOrDefault()!;
            if (order != null)
            {
                if (order.Status == "Awaiting confirmation")
                {
                    closeOrder(order, performer);
                }
                else if (order.Status == "Processing")
                {
                    markAwaitingForConfirmation(order, performer);
                }
                else if (order.Status == "Active")
                {
                    closeOrder(order, "employer");
                }

                    App.db.SaveChanges();
                CollectionViewSource.GetDefaultView(dataGrid.ItemsSource).Refresh();
            }
            else throw new OrderNotFoundException("");
        }

        private void markAwaitingForConfirmation(Order order, string whoMarked)
        {
            if (order.WhoConfirmedCompletion != whoMarked)
            {
                order.WhoConfirmedCompletion = whoMarked;
                order.Status = "Awaiting confirmation";

                snackBar1.MessageQueue?.Enqueue
                    ($"Order {order!.ID} marked as completed. ",
                    null, null, null, false, true, TimeSpan.FromSeconds(3));

                App.logWriter!.WriteLine($"Order {order!.ID}" +
                    $" marked as completed by {whoMarked}\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
            }
            else
            {
                youAlreadyHaveMarkedTheOrderAsCompleted(order);
            }
        }

        private void closeOrder(Order order, string whoClosed)
        {
            User employer = App.db.Users.Where(x => x.UserId == order.EmployerID).FirstOrDefault()!;
            if (order.WhoConfirmedCompletion != whoClosed)
            {
                order.Status = "Closed";
                employer.OrderID = null;

                snackBar1.MessageQueue?.Enqueue
                    ($"You have closed the order {order!.ID}",
                    null, null, null, false, true, TimeSpan.FromSeconds(3));

                App.logWriter!.WriteLine($"Order {order!.ID}" +
                    $" closed by {whoClosed}\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
            }
            else
            {
                youAlreadyHaveMarkedTheOrderAsCompleted(order);
            }
        }

        private void youAlreadyHaveMarkedTheOrderAsCompleted(Order order)
        {
            snackBar1.MessageQueue?.Enqueue
                                ($"Order {order!.ID} is awating for a confirmation",
                                null, null, null, false, true, TimeSpan.FromSeconds(3));
        }

        #endregion

        #region DataGridSelected
        private void ordersEmployerDataGrid_SelectionChanged(object sender, RoutedEventArgs e)
        {
            ordersEmployeeDataGrid.UnselectAllCells();
        }
        private void ordersEmployeeDataGrid_SelectionChanged(object sender, RoutedEventArgs e)
        {
            ordersEmployerDataGrid.UnselectAllCells();
        }
        #endregion
    }
}