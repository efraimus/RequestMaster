using RequestMaster.Databases.MainDatabase;
using RequestMaster.Exceptions;
using RequestMaster.Patterns;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace RequestMaster.Tabs
{
    public partial class Requests : UserControl
    {
        RequestsContext db;
        Request? requestCard;

        #region requestsDataGrid

        public Requests()
        {
            db = DatabaseSingleton.CreateInstance();
            InitializeComponent();
            helpButton.Focus();
            refreshTables();
        }

        private void refreshTables()
        {
            requestsDataGrid.ItemsSource = db.Requests.ToList();
            requestsDataGrid.AutoGeneratedColumns += requestsDataGrid_AutoGeneratedColumns;
            commentsDataGrid.AutoGeneratedColumns += CommentsDataGrid_AutoGeneratedColumns;
        }

        private void CommentsDataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            commentsDataGrid.Columns[0].Header = "ID";
            commentsDataGrid.Columns[1].Header = "содержание";
            commentsDataGrid.Columns[2].Header = "кто создал";
            commentsDataGrid.Columns[3].Header = "дата создания";
            commentsDataGrid.Columns[4].Visibility = Visibility.Hidden;
            commentsDataGrid.Columns[5].Visibility = Visibility.Hidden;
        }
        private void requestsDataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            requestsDataGrid.Columns[0].Header = "ID";
            requestsDataGrid.Columns[1].Header = "описание";
            requestsDataGrid.Columns[2].Header = "номер";
            requestsDataGrid.Columns[3].Header = "статус";
            requestsDataGrid.Columns[4].Visibility = Visibility.Hidden;
            requestsDataGrid.Columns[5].Visibility = Visibility.Hidden;
            requestsDataGrid.Columns[6].Visibility = Visibility.Hidden;
        }
       
        private void SortButton_Click(object sender, RoutedEventArgs e)
        {
            if (radioButtonStatus_NotImportant.IsChecked == false)
            {
                string status = "";
                if (radioButtonStatus_Active.IsChecked == true) status = "активна";
                else if (radioButtonStatus_Processing.IsChecked == true) status = "в обработке";
                else if (radioButtonStatus_Closed.IsChecked == true) status = "закрыта";

                requestsDataGrid.ItemsSource = db.Requests.Where(x => x.Status == status.ToString()).ToList();
            }
            else
            {
                requestsDataGrid.ItemsSource = db.Requests.ToList();
            }
            CollectionViewSource.GetDefaultView(requestsDataGrid.ItemsSource).Refresh();
            App.logWriter.WriteLine($"меню заявок: заявки отсортированы\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }

        private void helpButton_Click(object sender, RoutedEventArgs e)
        {
            snackBar.MessageQueue?.Enqueue
                    ("нажмите на любую заявку дважды", null, null, null, false, true, TimeSpan.FromSeconds(3));
            App.logWriter!.WriteLine($"меню заявок: нажата кнопка помощь\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        private void ClearFiltersButton_Click(object sender, RoutedEventArgs e)
        {
            refreshRequestsDataGridWithoutFilters();
            App.logWriter!.WriteLine($"меню заявок: фильтры очищены\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }
        private void createRequestButton_Click(object sender, RoutedEventArgs e)
        {
            requestsDataGrid.Visibility = Visibility.Hidden;
            createRequestBorder.Visibility = Visibility.Visible;
            App.logWriter!.WriteLine($"меню заявок: нажата кнопка создать заявку\t\t\t\t{(DateTime.Now).ToLongTimeString()}");

        }

        private void refreshRequestsDataGridWithoutFilters()
        {
            requestsDataGrid.ItemsSource = db.Requests.ToList();
            App.logWriter!.WriteLine($"меню заявок: таблица обновлена без фильтров\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }

        #endregion

        #region createRequestBorder

        private bool isFieldsCorrect()
        {
            if (textBoxDescription.Text != "" &&
           textBoxTelephoneNumber.Text != "") return true;

            else return false;
        }

        private void clearFields()
        {
            textBoxDescription.Clear();
            textBoxTelephoneNumber.Clear();
            App.logWriter.WriteLine($"меню создания заявки: поля очищены\t\t\t\t{(DateTime.Now).ToLongTimeString()}");

        }

        public void createRequestButton2_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                RequestCreatingExceptions.checkDescription(textBoxDescription);
                RequestCreatingExceptions.checkTelephoneNumber(textBoxTelephoneNumber);

                using (RequestsContext db = new RequestsContext())
                {
                    int id = db.Requests.Count() + 1;
                    if (isFieldsCorrect())
                    {
                        Request request = new Request();
                        request.Description = textBoxDescription.Text;
                        request.TelephoneNumber = textBoxTelephoneNumber.Text;
                        request.Status = "активна";
                        request.WhoCreatedID = AuthWindow.userID;
                        db.Requests.Add(request);
                        db.SaveChanges();
                        clearFields();
                        refreshRequestsDataGridWithoutFilters();
                        snackBar2.MessageQueue?.Enqueue
                            ("заявка создана", null, null, null, false, true, TimeSpan.FromSeconds(3));
                        App.logWriter!.WriteLine($"меню создания заявки: заявка №{id} создана\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
                    }

                    else
                    {
                        snackBar.MessageQueue?.Enqueue
                            ("проверьте правильность ввода данных", null, null, null, false, true, TimeSpan.FromSeconds(3));
                    }
                }
            }
            catch (Microsoft.EntityFrameworkCore.DbUpdateException)
            {
                snackBar.MessageQueue?.Enqueue
                        ("ошибка при добавлении данных", null, null, null, false, true, TimeSpan.FromSeconds(3));
            }
        }
        private void returnButton_Click(object sender, RoutedEventArgs e)
        {
            requestsDataGrid.Visibility = Visibility.Visible;
            createRequestBorder.Visibility = Visibility.Hidden;
            App.logWriter!.WriteLine($"меню создания заявки: нажата кнопка назад\t\t\t\t{(DateTime.Now).ToLongTimeString()}");
        }

        #endregion


        #region requestDetails

        private void requestsDataGrid_MouseDoubleClick(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            requestsDataGrid.Visibility = Visibility.Hidden;
            requestDetails.Visibility = Visibility.Visible;
            requestCard = db.Requests.Where(x => x.RequestID == requestsDataGrid.SelectedIndex + 1).First();
            requestIdTextBlock.Text = $"{requestCard.RequestID}";
            requestTelephoneNumberTextBlock.Text = $"{requestCard.TelephoneNumber}";
            requestDescriptionTextBlock.Text = $"{requestCard.Description}";
            requestStatusTextBlock.Text = $"{requestCard.Status}";
            commentsDataGrid.ItemsSource = db.Comments.Where(x => x.RequestID == requestCard!.RequestID).ToList();
        }

        private void addCommentButton_Click(object sender, RoutedEventArgs e)
        {
            commentsDataGrid.Visibility = Visibility.Hidden;
            addCommentButton.Visibility = Visibility.Hidden;
            newCommentGrid.Visibility = Visibility.Visible;
            returnButton3.Visibility = Visibility.Visible;
        }
        private void confirmAddingCommentButton_Click(object sender, RoutedEventArgs e)
        {
            Comment comment = new Comment();
            comment.Content = commentTextBox.Text;
            comment.WhoCreated = AuthWindow.login!;
            comment.DateTimeOfCreating = $"{DateTime.Now:G}";
            comment.RequestID = requestCard!.RequestID;
            commentTextBox.Clear();
            db.Comments.Add(comment);
            db.SaveChanges();
            commentsDataGrid.ItemsSource = db.Comments.Where(x => x.RequestID == requestCard!.RequestID).ToList();
            snackBar4.MessageQueue?.Enqueue
                    ("комментарий добавлен", null, null, null, false, true, TimeSpan.FromSeconds(3));
            refreshTables();
        }

        private void returnButton2_Click(object sender, RoutedEventArgs e)
        {
            requestsDataGrid.Visibility = Visibility.Visible;
            requestDetails.Visibility = Visibility.Hidden;
            refreshRequestsDataGridWithoutFilters();
        }
        private void returnButton3_Click(object sender, RoutedEventArgs e)
        {
            commentsDataGrid.Visibility = Visibility.Visible;
            addCommentButton.Visibility = Visibility.Visible;
            newCommentGrid.Visibility = Visibility.Hidden;
            returnButton3.Visibility = Visibility.Hidden;
        }
        private void сloseRequestButton_Click(object sender, RoutedEventArgs e)
        {
            if (requestCard!.Status == "закрыта")
            {
                snackBar3.MessageQueue?.Enqueue
                    ("заявка уже закрыта", null, null, null, false, true, TimeSpan.FromSeconds(3));
            }
            else
            {
                requestCard.Status = "закрыта";
                requestStatusTextBlock.Text = "закрыта";
                snackBar3.MessageQueue?.Enqueue
                    ("заявка закрыта", null, null, null, false, true, TimeSpan.FromSeconds(3));
                db.SaveChanges();
            }
        }

        #endregion
    }
}