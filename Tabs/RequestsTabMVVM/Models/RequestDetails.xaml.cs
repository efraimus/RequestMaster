using RequestMaster.Databases.MainDatabase;
using RequestMaster.Patterns;
using System.Windows;
using System.Windows.Controls;

namespace RequestMaster.Tabs.RequestsTabMVVM.Models
{
    public partial class RequestDetails : UserControl
    {
        RequestsContext db;
        public RequestDetails()
        {
            InitializeComponent();
            db = DatabaseSingleton.CreateInstance();
        }

        private void refreshTable()
        {
            if (Requests.requestCard != null)
            {
                commentsDataGrid.ItemsSource = db.Comments.Where(x => x.RequestID == Requests.requestCard!.RequestID).ToList();
                commentsDataGrid.AutoGeneratedColumns += CommentsDataGrid_AutoGeneratedColumns;
            }
            App.log($"меню детали заявки: вкладка обновлена");
        }

        private void CommentsDataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            commentsDataGrid.Columns[0].Header = "ID";
            commentsDataGrid.Columns[1].Header = "содержание";
            commentsDataGrid.Columns[2].Header = "кто создал";
            commentsDataGrid.Columns[3].Header = "дата создания";
            commentsDataGrid.Columns[4].Visibility = Visibility.Hidden;
            commentsDataGrid.Columns[5].Visibility = Visibility.Hidden;
        }
        private void addCommentButton_Click(object sender, RoutedEventArgs e)
        {
            commentsDataGrid.Visibility = Visibility.Hidden;
            addCommentButton.Visibility = Visibility.Hidden;
            newCommentGrid.Visibility = Visibility.Visible;
            returnButton2.Visibility = Visibility.Visible;
            App.log($"меню детали заявки: нажата кнопка добавить комментарий");
        }
        private void confirmAddingCommentButton_Click(object sender, RoutedEventArgs e)
        {
            if (Requests.requestCard != null)
            {
                Comment comment = new Comment();
                comment.Content = commentTextBox.Text;
                comment.WhoCreated = AuthWindow.login!;
                comment.DateTimeOfCreating = $"{DateTime.Now:G}";
                comment.RequestID = Requests.requestCard.RequestID;
                commentTextBox.Clear();
                db.Comments.Add(comment);
                db.SaveChanges();
                commentsDataGrid.ItemsSource = db.Comments.Where(x => x.RequestID == Requests.requestCard.RequestID).ToList();
                snackBar4.MessageQueue?.Enqueue
                        ("комментарий добавлен", null, null, null, false, true, TimeSpan.FromSeconds(3));
                refreshTable();
                App.log($"меню детали заявки: комментарий к заявке №{comment.RequestID} добавлен");
            }
        }

        private void returnButton_Click(object sender, RoutedEventArgs e)
        {
            Requests.requestsMenu.Visibility = Visibility.Visible;
            App.log($"меню детали заявки: вкладка закрыта");
        }
        private void returnButton2_Click(object sender, RoutedEventArgs e)
        {
            commentsDataGrid.Visibility = Visibility.Visible;
            addCommentButton.Visibility = Visibility.Visible;
            newCommentGrid.Visibility = Visibility.Hidden;
            returnButton2.Visibility = Visibility.Hidden;
            App.log($"меню детали заявки: меню добавления комментария закрыто");
        }
        private void сloseRequestButton_Click(object sender, RoutedEventArgs e)
        {
            if (Requests.requestCard != null)
            {
                if (Requests.requestCard.Status == "закрыта")
                {
                    snackBar3.MessageQueue?.Enqueue
                        ("заявка уже закрыта", null, null, null, false, true, TimeSpan.FromSeconds(3));
                    App.log($"меню детали заявки: попытка закрыть закрытую заявку");
                }
                else
                {
                    Requests.requestCard.Status = "закрыта";
                    requestStatusTextBlock.Text = "закрыта";
                    db.SaveChanges();
                    snackBar3.MessageQueue?.Enqueue
                        ("заявка закрыта", null, null, null, false, true, TimeSpan.FromSeconds(3));
                    App.log($"меню детали заявки: заявка №{Requests.requestCard.RequestID} закрыта");
                }
            }
        }
    }
}
